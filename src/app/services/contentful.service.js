"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/common/http");
var core_1 = require("@angular/core");
var marked = require("marked");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var environment_prod_1 = require("../../environments/environment.prod");
var settings_service_1 = require("./settings.service");
var event_item_model_1 = require("../models/event-item.model");
var info_item_model_1 = require("../models/info-item.model");
var simple_content_model_1 = require("../models/simple-content.model");
var speaker_model_1 = require("../models/speaker.model");
var workshop_model_1 = require("../models/workshop.model");
var dialog = require("ui/dialogs");
var EventContentTypes;
(function (EventContentTypes) {
    EventContentTypes["SPEAKER"] = "speaker";
    EventContentTypes["WORKSHOP"] = "workshop";
    EventContentTypes["EVENT_ITEM"] = "eventItem";
    EventContentTypes["SIMPLE_CONTENT"] = "simpleContent";
    EventContentTypes["INFO_ITEM"] = "infoItem";
})(EventContentTypes = exports.EventContentTypes || (exports.EventContentTypes = {}));
var EventItemType;
(function (EventItemType) {
    EventItemType["NGPOLAND"] = "ngPoland";
    EventItemType["JSPOLAND"] = "jsPoland";
})(EventItemType = exports.EventItemType || (exports.EventItemType = {}));
var ContentfulService = /** @class */ (function () {
    function ContentfulService(settings, http) {
        this.settings = settings;
        this.http = http;
        this.CONTENTFUL_URL = "http://cdn.contentful.com";
        this.CONTENTFUL_URL_ENTRIES = this.CONTENTFUL_URL + "/spaces/" + environment_prod_1.environment.contentful.spaceId + "/environments/master/entries?access_token=" + environment_prod_1.environment.contentful.token;
    }
    ContentfulService.prototype.getContentfulUrlEntry = function (entryId) {
        return "http://cdn.contentful.com/spaces/" + environment_prod_1.environment.contentful.spaceId + "/environments/master/entries/" + entryId + "?access_token=" + environment_prod_1.environment.contentful.token;
    };
    ContentfulService.prototype.getContentfulUrlParameters = function (params) {
        return Object.entries(params)
            .map(function (_a) {
            var key = _a[0], val = _a[1];
            return key + "=" + val;
        })
            .join("&");
    };
    ContentfulService.prototype.getInfoItems = function (howMany) {
        var query = {
            content_type: EventContentTypes.INFO_ITEM,
            locale: this.settings.getLocale(),
            order: "fields.order",
            limit: howMany
        };
        return this.http
            .get(this.CONTENTFUL_URL_ENTRIES + "&" + this.getContentfulUrlParameters(query), { responseType: "json" })
            .pipe(operators_1.map(function (entries) {
            return entries.items.map(function (item) {
                return new info_item_model_1.InfoItem(item.fields.title, item.fields.ordre, item.fields.icon, item.fields.description, item.fields.urlLink);
            });
        }));
    };
    ContentfulService.prototype.getEventItems = function (howMany, type) {
        var _this = this;
        var query = {
            content_type: EventContentTypes.EVENT_ITEM,
            locale: this.settings.getLocale(),
            "fields.type": type,
            order: "fields.startDate",
            limit: howMany
        };
        return this.http
            .get(this.CONTENTFUL_URL_ENTRIES + "&" + this.getContentfulUrlParameters(query), { responseType: "json" })
            .pipe(operators_1.map(function (entries) {
            var assets = null;
            var links = null;
            if (entries.includes) {
                assets = entries.includes.Asset;
                links = entries.includes.Entry;
            }
            return entries.items.map(function (item) {
                var speaker = null;
                if (links && item.fields.presenter) {
                    speaker = _this.getEntryById(links, item.fields.presenter.sys.id);
                }
                var speakerPhoto = null;
                if (speaker) {
                    speakerPhoto = _this.getAssetById(assets, speaker.fields.photo.sys.id);
                }
                return new event_item_model_1.EventItem(item.fields.title, item.fields.type, item.fields.category, item.fields.shortDescription, item.fields.description, item.fields.startDate, item.fields.endDate, speaker
                    ? new speaker_model_1.Speaker(speaker.fields.name, speaker.fields.role, speaker.fields.bio, speakerPhoto ? speakerPhoto.fields.file.url : undefined, speakerPhoto ? speakerPhoto.fields.title : undefined, speakerPhoto ? speakerPhoto.fields.description : undefined, speaker.fields.email, speaker.fields.urlGithub, speaker.fields.urlLinkedIn, speaker.fields.urlTwitter, speaker.fields.urlWww)
                    : undefined);
            });
        }), operators_1.shareReplay(), operators_1.timeout(20000), operators_1.retryWhen(function (errors) {
            return errors.pipe(operators_1.delayWhen(function () { return rxjs_1.timer(2000); }), operators_1.tap(function () {
                console.log("retrying...");
                dialog.alert("Bład połaczenia");
            }));
        }));
    };
    ContentfulService.prototype.getSimpleContentById = function (myId) {
        var query = {
            content_type: EventContentTypes.SIMPLE_CONTENT,
            locale: this.settings.getLocale(),
            "fields.myId": myId,
            limit: 1
        };
        return this.http
            .get(this.CONTENTFUL_URL_ENTRIES + "&" + this.getContentfulUrlParameters(query), { responseType: "json" })
            .pipe(operators_1.map(function (entries) {
            if (entries && entries.items && entries.items[0]) {
                return new simple_content_model_1.SimpleContent(entries.items[0].fields.myId, entries.items[0].fields.title, entries.items[0].fields.text);
            }
            else {
                return new simple_content_model_1.SimpleContent("000", "nie udało się", "nie wyszło coś");
            }
        }));
    };
    ContentfulService.prototype.getWorkshops = function (howMany) {
        var _this = this;
        var query = {
            content_type: EventContentTypes.WORKSHOP,
            locale: this.settings.getLocale(),
            order: "sys.createdAt",
            limit: howMany
        };
        return this.http
            .get(this.CONTENTFUL_URL_ENTRIES + "&" + this.getContentfulUrlParameters(query), { responseType: "json" })
            .pipe(operators_1.map(function (entries) {
            var assets = entries.includes.Asset;
            var links = entries.includes.Entry;
            return entries.items.map(function (item) {
                //  const profilePhoto: Asset = this.getAssetById(assets, item.fields.photo.sys.id);
                var speaker = _this.getEntryById(links, item.fields.instructor.sys.id);
                // console.log("Spekaer: ", speaker);
                var speakerPhoto = _this.getAssetById(assets, speaker.fields.photo.sys.id);
                return new workshop_model_1.Workshop(item.fields.title, item.fields.description, new speaker_model_1.Speaker(speaker.fields.name, speaker.fields.role, speaker.fields.bio, speakerPhoto ? speakerPhoto.fields.file.url : undefined, speakerPhoto ? speakerPhoto.fields.title : undefined, speakerPhoto ? speakerPhoto.fields.description : undefined, speaker.fields.email, speaker.fields.urlGithub, speaker.fields.urlLinkedIn, speaker.fields.urlTwitter, speaker.fields.urlWww), item.fields.startDate, item.fields.endDate, 0, // TODO: zamienić na współrzędne
                0, // TODO: zamienić na współrzędne
                item.fields.locationDescription, item.fields.pricePln);
            });
        }));
    };
    ContentfulService.prototype.getSpeakers = function (howMany) {
        var _this = this;
        var query = {
            content_type: EventContentTypes.SPEAKER,
            locale: this.settings.getLocale(),
            order: "sys.createdAt",
            limit: howMany
        };
        return this.http
            .get(this.CONTENTFUL_URL_ENTRIES + "&" + this.getContentfulUrlParameters(query), { responseType: "json" })
            .pipe(operators_1.map(function (entries) {
            var assets = entries.includes.Asset;
            return entries.items.map(function (item) {
                var profilePhoto = _this.getAssetById(assets, item.fields.photo.sys.id);
                return new speaker_model_1.Speaker(item.fields.name, item.fields.role, item.fields.bio, profilePhoto ? profilePhoto.fields.file.url : undefined, profilePhoto ? profilePhoto.fields.title : undefined, profilePhoto ? profilePhoto.fields.description : undefined, item.fields.email, item.fields.urlGithub, item.fields.urlLinkedIn, item.fields.urlTwitter, item.fields.urlWww);
            });
        }));
    };
    ContentfulService.prototype.markdownToHtml = function (md) {
        return marked(md);
    };
    ContentfulService.prototype.getAssetById = function (assetArray, id) {
        if (assetArray && assetArray.length > 0) {
            var newArray = assetArray.filter(function (item) { return item.sys.id === id; });
            if (newArray && newArray.length > 0) {
                return newArray[0];
            }
        }
        return {};
    };
    ContentfulService.prototype.getAssetsByIds = function (assetArray, ids) {
        if (assetArray && assetArray.length > 0 && ids && ids.length > 0) {
            var newArray = assetArray.filter(function (item) {
                return ids.includes(item.sys.id);
            });
            return newArray;
        }
        return {};
    };
    ContentfulService.prototype.getEntryById = function (entriesArray, id) {
        if (entriesArray && entriesArray.length > 0) {
            var newArray = entriesArray.filter(function (item) { return item.sys.id === id; });
            if (newArray && newArray.length > 0) {
                return newArray[0];
            }
        }
        return {};
    };
    ContentfulService.prototype.getEntriesByContentType = function (entriesArray, contentType) {
        if (entriesArray && entriesArray.length > 0) {
            var newArray = entriesArray.filter(function (item) { return item.sys.contentType.sys.id === contentType; });
            if (newArray && newArray.length > 0) {
                return newArray;
            }
        }
        return {};
    };
    ContentfulService = __decorate([
        core_1.Injectable({
            providedIn: "root"
        }),
        __metadata("design:paramtypes", [settings_service_1.SettingsService, http_1.HttpClient])
    ], ContentfulService);
    return ContentfulService;
}());
exports.ContentfulService = ContentfulService;
//# sourceMappingURL=data:application/json;base64,